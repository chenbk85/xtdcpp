<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="Request_8cc" kind="file" language="C++">
    <compoundname>Request.cc</compoundname>
    <includes refid="Request_8hh" local="yes">Request.hh</includes>
    <includes local="no">boost/lexical_cast.hpp</includes>
    <includes local="no">logger.hh</includes>
    <includes local="no">string</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">limits</includes>
    <includes local="no">sstream</includes>
    <includes local="no">istream</includes>
    <includes local="no">iterator</includes>
    <includes local="no">boost/format.hpp</includes>
    <includes local="no">boost/algorithm/string/split.hpp</includes>
    <includes local="no">boost/algorithm/string/trim.hpp</includes>
    <includes local="no">boost/algorithm/string/predicate.hpp</includes>
    <includes local="no">boost/algorithm/string/find_format.hpp</includes>
    <includes local="no">boost/algorithm/string/regex_find_format.hpp</includes>
    <includes local="no">boost/algorithm/string/case_conv.hpp</includes>
    <includes local="no">boost/algorithm/string/classification.hpp</includes>
    <includes local="no">boost/algorithm/string/replace.hpp</includes>
    <includes local="no">boost/assign/std/vector.hpp</includes>
    <includes local="no">boost/foreach.hpp</includes>
    <includes local="no">boost/algorithm/string/join.hpp</includes>
    <incdepgraph>
      <node id="1665">
        <label>iomanip</label>
      </node>
      <node id="1666">
        <label>limits</label>
      </node>
      <node id="1654">
        <label>/home/psyco/dev/xtdcpp/network/src/http/Request.cc</label>
        <link refid="Request.cc"/>
        <childnode refid="1655" relation="include">
        </childnode>
        <childnode refid="1663" relation="include">
        </childnode>
        <childnode refid="1664" relation="include">
        </childnode>
        <childnode refid="1656" relation="include">
        </childnode>
        <childnode refid="1665" relation="include">
        </childnode>
        <childnode refid="1666" relation="include">
        </childnode>
        <childnode refid="1667" relation="include">
        </childnode>
        <childnode refid="1668" relation="include">
        </childnode>
        <childnode refid="1669" relation="include">
        </childnode>
        <childnode refid="1670" relation="include">
        </childnode>
        <childnode refid="1671" relation="include">
        </childnode>
        <childnode refid="1672" relation="include">
        </childnode>
        <childnode refid="1673" relation="include">
        </childnode>
        <childnode refid="1674" relation="include">
        </childnode>
        <childnode refid="1675" relation="include">
        </childnode>
        <childnode refid="1676" relation="include">
        </childnode>
        <childnode refid="1677" relation="include">
        </childnode>
        <childnode refid="1678" relation="include">
        </childnode>
        <childnode refid="1679" relation="include">
        </childnode>
        <childnode refid="1680" relation="include">
        </childnode>
        <childnode refid="1681" relation="include">
        </childnode>
      </node>
      <node id="1669">
        <label>iterator</label>
      </node>
      <node id="1663">
        <label>boost/lexical_cast.hpp</label>
      </node>
      <node id="1655">
        <label>Request.hh</label>
        <link refid="Request_8hh"/>
        <childnode refid="1656" relation="include">
        </childnode>
        <childnode refid="1657" relation="include">
        </childnode>
        <childnode refid="1658" relation="include">
        </childnode>
        <childnode refid="1659" relation="include">
        </childnode>
        <childnode refid="1660" relation="include">
        </childnode>
        <childnode refid="1661" relation="include">
        </childnode>
        <childnode refid="1662" relation="include">
        </childnode>
      </node>
      <node id="1680">
        <label>boost/foreach.hpp</label>
      </node>
      <node id="1677">
        <label>boost/algorithm/string/classification.hpp</label>
      </node>
      <node id="1670">
        <label>boost/format.hpp</label>
      </node>
      <node id="1660">
        <label>boost/noncopyable.hpp</label>
      </node>
      <node id="1656">
        <label>string</label>
      </node>
      <node id="1658">
        <label>map</label>
      </node>
      <node id="1672">
        <label>boost/algorithm/string/trim.hpp</label>
      </node>
      <node id="1673">
        <label>boost/algorithm/string/predicate.hpp</label>
      </node>
      <node id="1674">
        <label>boost/algorithm/string/find_format.hpp</label>
      </node>
      <node id="1671">
        <label>boost/algorithm/string/split.hpp</label>
      </node>
      <node id="1679">
        <label>boost/assign/std/vector.hpp</label>
      </node>
      <node id="1657">
        <label>vector</label>
      </node>
      <node id="1676">
        <label>boost/algorithm/string/case_conv.hpp</label>
      </node>
      <node id="1667">
        <label>sstream</label>
      </node>
      <node id="1681">
        <label>boost/algorithm/string/join.hpp</label>
      </node>
      <node id="1662">
        <label>Request.hxx</label>
      </node>
      <node id="1675">
        <label>boost/algorithm/string/regex_find_format.hpp</label>
      </node>
      <node id="1659">
        <label>boost/regex.hpp</label>
      </node>
      <node id="1664">
        <label>logger.hh</label>
      </node>
      <node id="1661">
        <label>types.hh</label>
      </node>
      <node id="1678">
        <label>boost/algorithm/string/replace.hpp</label>
      </node>
      <node id="1668">
        <label>istream</label>
      </node>
    </incdepgraph>
    <innerclass refid="structxtd_1_1network_1_1http_1_1hex__to__string" prot="public">xtd::network::http::hex_to_string</innerclass>
    <innernamespace refid="namespacextd">xtd</innernamespace>
    <innernamespace refid="namespacextd_1_1network">xtd::network</innernamespace>
    <innernamespace refid="namespacextd_1_1network_1_1http">xtd::network::http</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Request_8hh" kindref="compound">Request.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;istream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/format.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/string/split.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/string/trim.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/string/predicate.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/string/find_format.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/string/regex_find_format.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/string/case_conv.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/string/classification.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/string/replace.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/lexical_cast.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/assign/std/vector.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/foreach.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/algorithm/string/join.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;logger.hh&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>boost::assign::operator+=;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacextd" kindref="compound">xtd</ref><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">network<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">http<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="classxtd_1_1network_1_1http_1_1Request_1a6255d0a163700ed3aec8b8e655573208" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1a6255d0a163700ed3aec8b8e655573208" kindref="member">Request::Request</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>p_cgiToLower)<sp/>:</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/>m_rawUrl(),</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>m_method(METHOD_GET),</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>m_path(),</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>m_cgi(),</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>m_post(),</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>m_headers(),</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>m_versionStr(</highlight><highlight class="stringliteral">&quot;1.0&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>m_version(<ref refid="classxtd_1_1network_1_1http_1_1Request" kindref="compound">Request</ref>::VERSION_1_0),</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>m_cgiToLower(p_cgiToLower),</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>m_regex_tooManyStartingSlash(</highlight><highlight class="stringliteral">&quot;\\/{2,}&quot;</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>m_regex_tooManyEndingSlash(</highlight><highlight class="stringliteral">&quot;[^\\/](\\/+)$&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">status</highlight></codeline>
<codeline lineno="47" refid="classxtd_1_1network_1_1http_1_1Request_1acd61448f2826e30001bf6d9ada90a2a6" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1acd61448f2826e30001bf6d9ada90a2a6" kindref="member">Request::readQS</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_qs)</highlight></codeline>
<codeline lineno="48"><highlight class="normal">{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>readUrl(p_qs);</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="classxtd_1_1network_1_1http_1_1Request_1a3ee369c6c2b8888815f1347d9f7df3f0" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1a3ee369c6c2b8888815f1347d9f7df3f0" kindref="member">Request::setMethod</ref>(<ref refid="classxtd_1_1network_1_1http_1_1Request_1a789d6d688af4e63cc725542fc7925627" kindref="member">t_method</ref><sp/>p_method)</highlight></codeline>
<codeline lineno="54"><highlight class="normal">{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>m_method<sp/>=<sp/>p_method;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal">Request::normalizePath(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_path)</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>boost::smatch<sp/>l_match;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>m_path<sp/>=<sp/>paramValueDecode(p_path);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/>m_path<sp/>=<sp/>boost::regex_replace(m_path,<sp/>boost::regex(</highlight><highlight class="stringliteral">&quot;^/+&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>m_path<sp/>=<sp/>boost::regex_replace(m_path,<sp/>boost::regex(</highlight><highlight class="stringliteral">&quot;/+$&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="classxtd_1_1network_1_1http_1_1Request_1a42304776ec9355ab89c6e8e0391f4309" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1a42304776ec9355ab89c6e8e0391f4309" kindref="member">Request::addCgi</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_key,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_value)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>m_cgi.insert(make_pair(p_key,<sp/>p_value));</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="classxtd_1_1network_1_1http_1_1Request_1a463b8876852246bac863584f9dc3d0ae" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1a463b8876852246bac863584f9dc3d0ae" kindref="member">Request::addPost</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_key,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_value)</highlight></codeline>
<codeline lineno="86"><highlight class="normal">{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>m_post.insert(make_pair(p_key,<sp/>p_value));</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="classxtd_1_1network_1_1http_1_1Request_1ac7f15d9f25ab85da1569e7718ea6544d" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1ac7f15d9f25ab85da1569e7718ea6544d" kindref="member">Request::addHeader</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_name,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_value)</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/>m_headers[p_name]<sp/>=<sp/>p_value;</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="classxtd_1_1network_1_1http_1_1Request_1a4fc25edc6c133d46f1780a3b8c5a3c4e" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1a4fc25edc6c133d46f1780a3b8c5a3c4e" kindref="member">Request::setVersion</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_version)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>m_versionStr<sp/>=<sp/>p_version;</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="classxtd_1_1network_1_1http_1_1Request_1a3a56519771fa2e7af734152a12b56361" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1a4fc25edc6c133d46f1780a3b8c5a3c4e" kindref="member">Request::setVersion</ref>(<ref refid="classxtd_1_1network_1_1http_1_1Request_1ad1842a3667ff0a96222bb69262cda536" kindref="member">t_version</ref><sp/>p_version)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>m_version<sp/>=<sp/>p_version;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="classxtd_1_1network_1_1http_1_1Request_1a2e739ee31fca9fdddc4fa69432405b09" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1a2e739ee31fca9fdddc4fa69432405b09" kindref="member">Request::removeCgi</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_key)</highlight></codeline>
<codeline lineno="113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>m_cgi.erase(p_key);</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="classxtd_1_1network_1_1http_1_1Request_1a69b20f61fbdf1727be7b6eb4623e30d7" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1a69b20f61fbdf1727be7b6eb4623e30d7" kindref="member">Request::removePost</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_key)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>m_post.erase(p_key);</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="classxtd_1_1network_1_1http_1_1Request_1adbbc4691784a7e7f49e31ffe54b733dd" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1adbbc4691784a7e7f49e31ffe54b733dd" kindref="member">Request::removeData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_key)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1a2e739ee31fca9fdddc4fa69432405b09" kindref="member">removeCgi</ref>(p_key);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1a69b20f61fbdf1727be7b6eb4623e30d7" kindref="member">removePost</ref>(p_key);</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1a789d6d688af4e63cc725542fc7925627" kindref="member">Request::t_method</ref></highlight></codeline>
<codeline lineno="134" refid="classxtd_1_1network_1_1http_1_1Request_1af06004afe64f465edfb281407b7f3600" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1af06004afe64f465edfb281407b7f3600" kindref="member">Request::getMethod</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="135"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_method;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="classxtd_1_1network_1_1http_1_1Request_1ac9aeee4365089901bd216350fdcbe3a2" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1ac9aeee4365089901bd216350fdcbe3a2" kindref="member">Request::getQS</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="142"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;<sp/>l_parts;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>BOOST_FOREACH(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>t_param_map::value_type&amp;<sp/>c_param,<sp/>m_cgi)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>l_parts<sp/>+=<sp/>c_param.first<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal"><sp/>+<sp/>c_param.second;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::join(l_parts,<sp/></highlight><highlight class="stringliteral">&quot;&amp;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="151" refid="classxtd_1_1network_1_1http_1_1Request_1a0006f0a88dccabdafe9dfed3627730f6" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1a0006f0a88dccabdafe9dfed3627730f6" kindref="member">Request::getPath</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="152"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_path;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1a3cd6e9ac7c35897002582c4a3b84b17d" kindref="member">Request::t_param_map</ref>&amp;</highlight></codeline>
<codeline lineno="157" refid="classxtd_1_1network_1_1http_1_1Request_1a48687de33ff80c714d6bc0112aa23c56" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1a48687de33ff80c714d6bc0112aa23c56" kindref="member">Request::getCgis</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="158"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_cgi;</highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1a3cd6e9ac7c35897002582c4a3b84b17d" kindref="member">Request::t_param_map</ref>&amp;</highlight></codeline>
<codeline lineno="163" refid="classxtd_1_1network_1_1http_1_1Request_1a1a849dbe8e258e208325056ac46438c9" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1a1a849dbe8e258e208325056ac46438c9" kindref="member">Request::getPosts</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="164"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_post;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1a3cd6e9ac7c35897002582c4a3b84b17d" kindref="member">Request::t_param_map</ref></highlight></codeline>
<codeline lineno="169" refid="classxtd_1_1network_1_1http_1_1Request_1aac37ae370c601f66b17e1ef071081957" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1aac37ae370c601f66b17e1ef071081957" kindref="member">Request::getParams</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="170"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1a3cd6e9ac7c35897002582c4a3b84b17d" kindref="member">t_param_map</ref><sp/>l_map;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>l_map.insert(m_cgi.begin(),<sp/>m_cgi.end());</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>l_map.insert(m_post.begin(),<sp/>m_post.end());</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l_map;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">Request::existsData(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1a3cd6e9ac7c35897002582c4a3b84b17d" kindref="member">t_param_map</ref>&amp;<sp/>p_src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_key)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="180"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_src.count(p_key)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="classxtd_1_1network_1_1http_1_1Request_1a21fc278ee56175b527ae58c909ad97a3" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1a21fc278ee56175b527ae58c909ad97a3" kindref="member">Request::existsCgi</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_key)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="186"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>existsData(m_cgi,<sp/>p_key);</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="classxtd_1_1network_1_1http_1_1Request_1ae121fd7a302ea9bb1a3fe66f3cb7f696" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1ae121fd7a302ea9bb1a3fe66f3cb7f696" kindref="member">Request::existsPost</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_key)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="192"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>existsData(m_post,<sp/>p_key);</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="classxtd_1_1network_1_1http_1_1Request_1a8bc12470bb1a04d71d84ed1053551df9" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1a8bc12470bb1a04d71d84ed1053551df9" kindref="member">Request::existsParam</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_key)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="198"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>existsData(m_cgi,<sp/>p_key)<sp/>||<sp/>existsData(m_post,<sp/>p_key);</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="classxtd_1_1network_1_1http_1_1Request_1ad334cf225213389711b7524a2c637e38" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1ad334cf225213389711b7524a2c637e38" kindref="member">Request::existsHeader</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_name)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="204"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_headers.count(p_name)<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="classxtd_1_1network_1_1http_1_1Request_1a99a0c9599f0d2bdc51f8e488fb4f78f4" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1a99a0c9599f0d2bdc51f8e488fb4f78f4" kindref="member">Request::getHeader</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_name,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_value)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="211"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>t_header_map::const_iterator<sp/>c_header<sp/>=<sp/>m_headers.find(p_name);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c_header<sp/>==<sp/>m_headers.end())</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>p_value<sp/>=<sp/>c_header-&gt;second;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1aeaf2a69c884e81983aebaf36518c310e" kindref="member">Request::t_header_map</ref>&amp;</highlight></codeline>
<codeline lineno="221" refid="classxtd_1_1network_1_1http_1_1Request_1abbe34833ea46c5a794c7c49796a192c3" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1abbe34833ea46c5a794c7c49796a192c3" kindref="member">Request::getHeaders</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="222"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_headers;</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;</highlight></codeline>
<codeline lineno="228" refid="classxtd_1_1network_1_1http_1_1Request_1a609f7328025e89fd8325677212ab307b" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1a609f7328025e89fd8325677212ab307b" kindref="member">Request::getVersionStr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="229"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_versionStr;</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1ad1842a3667ff0a96222bb69262cda536" kindref="member">Request::t_version</ref></highlight></codeline>
<codeline lineno="234" refid="classxtd_1_1network_1_1http_1_1Request_1acdf8a64d92f997aa7a0eaf7fc07cf897" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1acdf8a64d92f997aa7a0eaf7fc07cf897" kindref="member">Request::getVersion</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="235"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_version;</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">status</highlight></codeline>
<codeline lineno="240" refid="classxtd_1_1network_1_1http_1_1Request_1a050758a8848fb4190b305d955760fd79" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1a050758a8848fb4190b305d955760fd79" kindref="member">Request::read</ref>(std::istream&amp;<sp/>p_request)</highlight></codeline>
<codeline lineno="241"><highlight class="normal">{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacextd_1_1network_1_1http_1a55148922a7d13fe756e53e2ccad4b89ca444bcb3a3fcf8389296c49467f27e1d6" kindref="member">status::ok</ref><sp/>!=<sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1a1f25a3becd01d0ee957ecd697f178956" kindref="member">readHead</ref>(p_request))</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>logger::err(</highlight><highlight class="stringliteral">&quot;network.http.request&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;protocol<sp/>error<sp/>:<sp/>bad<sp/>initial<sp/>line&quot;</highlight><highlight class="normal">,<sp/>HERE);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status::error;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacextd_1_1network_1_1http_1a55148922a7d13fe756e53e2ccad4b89ca444bcb3a3fcf8389296c49467f27e1d6" kindref="member">status::ok</ref><sp/>!=<sp/>readData(p_request))</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>logger::err(</highlight><highlight class="stringliteral">&quot;network.http.request&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;protocol<sp/>error<sp/>:<sp/>invalid<sp/>data&quot;</highlight><highlight class="normal">,<sp/>HERE);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status::error;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacextd_1_1network_1_1http_1a55148922a7d13fe756e53e2ccad4b89ca444bcb3a3fcf8389296c49467f27e1d6" kindref="member">status::ok</ref>;</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">status</highlight></codeline>
<codeline lineno="258" refid="classxtd_1_1network_1_1http_1_1Request_1a1f25a3becd01d0ee957ecd697f178956" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1a1f25a3becd01d0ee957ecd697f178956" kindref="member">Request::readHead</ref>(std::istream&amp;<sp/>p_request)</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacextd_1_1network_1_1http_1a55148922a7d13fe756e53e2ccad4b89ca444bcb3a3fcf8389296c49467f27e1d6" kindref="member">status::ok</ref><sp/>!=<sp/>readInitial(p_request))</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>logger::err(</highlight><highlight class="stringliteral">&quot;network.http.request&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;protocol<sp/>error<sp/>:<sp/>bad<sp/>initial<sp/>line&quot;</highlight><highlight class="normal">,<sp/>HERE);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status::error;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacextd_1_1network_1_1http_1a55148922a7d13fe756e53e2ccad4b89ca444bcb3a3fcf8389296c49467f27e1d6" kindref="member">status::ok</ref><sp/>!=<sp/>readHeaders(p_request))</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>logger::err(</highlight><highlight class="stringliteral">&quot;network.http.request&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;protocol<sp/>error<sp/>:<sp/>bad<sp/>headers<sp/>lines&quot;</highlight><highlight class="normal">,<sp/>HERE);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status::error;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacextd_1_1network_1_1http_1a55148922a7d13fe756e53e2ccad4b89ca444bcb3a3fcf8389296c49467f27e1d6" kindref="member">status::ok</ref>;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal">status</highlight></codeline>
<codeline lineno="276"><highlight class="normal">Request::readInitial(istream&amp;<sp/>p_request)</highlight></codeline>
<codeline lineno="277"><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_line;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;<sp/>l_parts;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/>getline(p_request,<sp/>l_line);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>boost::trim_if(l_line,<sp/>boost::is_any_of(</highlight><highlight class="stringliteral">&quot;<sp/>\n\r\t&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>l_line.size())</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>logger::err(</highlight><highlight class="stringliteral">&quot;network.http.request&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;initial<sp/>line<sp/>error<sp/>:<sp/>no<sp/>initial<sp/>line&quot;</highlight><highlight class="normal">,<sp/>HERE);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status::error;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>boost::split(l_parts,<sp/>l_line,<sp/>boost::is_any_of(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(3<sp/>!=<sp/>l_parts.size())</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>logger::err(</highlight><highlight class="stringliteral">&quot;network.http.request&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;initial<sp/>line<sp/>error<sp/>:<sp/>invalid<sp/>initial<sp/>line<sp/>format<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>l_line,<sp/>HERE);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status::error;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacextd_1_1network_1_1http_1a55148922a7d13fe756e53e2ccad4b89ca444bcb3a3fcf8389296c49467f27e1d6" kindref="member">status::ok</ref><sp/>!=<sp/>readMethod(l_parts[0]))</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>logger::err(</highlight><highlight class="stringliteral">&quot;network.http.request&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;initial<sp/>line<sp/>error<sp/>:<sp/>unknown<sp/>method<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>l_parts[0],<sp/>HERE);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status::error;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacextd_1_1network_1_1http_1a55148922a7d13fe756e53e2ccad4b89ca444bcb3a3fcf8389296c49467f27e1d6" kindref="member">status::ok</ref><sp/>!=<sp/>readUrl(l_parts[1]))</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>logger::err(</highlight><highlight class="stringliteral">&quot;network.http.request&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;initial<sp/>line<sp/>error<sp/>:<sp/>invalid<sp/>url<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>l_parts[1],<sp/>HERE);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status::error;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacextd_1_1network_1_1http_1a55148922a7d13fe756e53e2ccad4b89ca444bcb3a3fcf8389296c49467f27e1d6" kindref="member">status::ok</ref><sp/>!=<sp/>readVersion(l_parts[2]))</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>logger::err(</highlight><highlight class="stringliteral">&quot;network.http.request&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;initial<sp/>line<sp/>error<sp/>:<sp/>invalid<sp/>version<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>l_parts[2],<sp/>HERE);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status::error;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacextd_1_1network_1_1http_1a55148922a7d13fe756e53e2ccad4b89ca444bcb3a3fcf8389296c49467f27e1d6" kindref="member">status::ok</ref>;</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal">status</highlight></codeline>
<codeline lineno="320"><highlight class="normal">Request::readMethod(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_method)</highlight></codeline>
<codeline lineno="321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>l_value<sp/>=<sp/>boost::to_lower_copy(p_method);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l_value<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;get&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1a3ee369c6c2b8888815f1347d9f7df3f0" kindref="member">setMethod</ref>(<ref refid="classxtd_1_1network_1_1http_1_1Request_1a789d6d688af4e63cc725542fc7925627a211feb11ea0c6defc080b91b8174ced6" kindref="member">Request::METHOD_GET</ref>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l_value<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;post&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1a3ee369c6c2b8888815f1347d9f7df3f0" kindref="member">setMethod</ref>(<ref refid="classxtd_1_1network_1_1http_1_1Request_1a789d6d688af4e63cc725542fc7925627ab832c767db7682c75bc4aa0d169b47cb" kindref="member">Request::METHOD_POST</ref>);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l_value<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;head&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1a3ee369c6c2b8888815f1347d9f7df3f0" kindref="member">setMethod</ref>(<ref refid="classxtd_1_1network_1_1http_1_1Request_1a789d6d688af4e63cc725542fc7925627a71ee8e01b676b10c098c9a9ccf53b414" kindref="member">Request::METHOD_HEAD</ref>);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>logger::err(</highlight><highlight class="stringliteral">&quot;network.http.request&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;initial<sp/>line<sp/>error<sp/>:<sp/>unknown<sp/>method<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>l_value,<sp/>HERE);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status::error;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacextd_1_1network_1_1http_1a55148922a7d13fe756e53e2ccad4b89ca444bcb3a3fcf8389296c49467f27e1d6" kindref="member">status::ok</ref>;</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Assume<sp/>url<sp/>is<sp/>encoded<sp/>with<sp/>iso-latin-1<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>convert<sp/>to<sp/>ascii</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-&gt;<sp/>same<sp/>process<sp/>as<sp/>in<sp/>ke_texttools.cc<sp/>ISO8859_Normalizer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341" refid="structxtd_1_1network_1_1http_1_1hex__to__string" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structxtd_1_1network_1_1http_1_1hex__to__string" kindref="compound">hex_to_string</ref></highlight></codeline>
<codeline lineno="342"><highlight class="normal">{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="344" refid="structxtd_1_1network_1_1http_1_1hex__to__string_1a88d313368d68cfdddb20e4496b73af87" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><ref refid="structxtd_1_1network_1_1http_1_1hex__to__string_1a88d313368d68cfdddb20e4496b73af87" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>p_match)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="345"><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>stringstream<sp/><sp/>l_value;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_intVal;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>l_result;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>l_value<sp/>&lt;&lt;<sp/>std::hex<sp/>&lt;&lt;<sp/>p_match.match_results().str(1);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>l_value<sp/>&gt;&gt;<sp/>l_intVal;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>l_result<sp/>=<sp/>l_intVal;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::str(boost::format(</highlight><highlight class="stringliteral">&quot;%c&quot;</highlight><highlight class="normal">)<sp/>%<sp/>l_result);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal">};</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal">Request::paramValueDecode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_value)</highlight></codeline>
<codeline lineno="360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_value(p_value);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/>boost::regex<sp/>l_hexRegex(</highlight><highlight class="stringliteral">&quot;%([0-9a-fA-F]{2})&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>boost::regex<sp/>l_spaceRegex(</highlight><highlight class="stringliteral">&quot;[<sp/>\t]{2,}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>all<sp/>+<sp/>by<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>boost::replace_all(l_value,<sp/></highlight><highlight class="stringliteral">&quot;+&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>replace<sp/>hex<sp/>value<sp/>by<sp/>corresponding<sp/>character</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>boost::smatch<sp/>l_match;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//CDE<sp/>while<sp/>used<sp/>for<sp/>%252520</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//maybe<sp/>a<sp/>future<sp/>feature</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//while<sp/>(boost::regex_search(l_value,<sp/>l_match,<sp/>l_hexRegex))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>boost::algorithm::find_format_all(l_value,</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::algorithm::regex_finder(l_hexRegex),</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structxtd_1_1network_1_1http_1_1hex__to__string" kindref="compound">hex_to_string</ref>());</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>duplicate<sp/>spaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>boost::algorithm::find_format_all(l_value,</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::algorithm::regex_finder(l_spaceRegex),</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::algorithm::const_formatter(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>boost::trim(l_value);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m_cgiToLower)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::to_lower(l_value);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l_value;</highlight></codeline>
<codeline lineno="388"><highlight class="normal">}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal">status</highlight></codeline>
<codeline lineno="392"><highlight class="normal">Request::readUrl(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_url)</highlight></codeline>
<codeline lineno="393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_cgiPairs;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_urlParts;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_pathParts;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;::const_iterator<sp/>cc_cgiPair;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_query;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>p_url.size())</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>logger::err(</highlight><highlight class="stringliteral">&quot;network.http.request&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;url<sp/>error<sp/>:<sp/>invalid<sp/>0<sp/>size&quot;</highlight><highlight class="normal">,<sp/>HERE);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status::error;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>string::size_type<sp/>l_pos<sp/>=<sp/>p_url.find(</highlight><highlight class="stringliteral">&quot;?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>l_path<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>p_url;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(string::npos<sp/>!=<sp/>l_pos)</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>l_query<sp/><sp/>=<sp/>l_path.substr(l_pos<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>l_path<sp/>=<sp/>l_path.substr(0,<sp/>l_pos);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::split(l_cgiPairs,<sp/>l_query,<sp/>boost::is_any_of(</highlight><highlight class="stringliteral">&quot;&amp;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cc_cgiPair<sp/>=<sp/>l_cgiPairs.begin();<sp/>cc_cgiPair<sp/>!=<sp/>l_cgiPairs.end();<sp/>cc_cgiPair++)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>l_cgi;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_key;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_value;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cc_cgiPair-&gt;size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>boost::split(l_cgi,<sp/>*cc_cgiPair,<sp/>boost::is_any_of(</highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l_key<sp/>=<sp/>l_cgi[0];</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l_cgi.size()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_value<sp/>=<sp/>l_cgi[1];</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l_cgi.size()<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>c_cgi<sp/>=<sp/>1;<sp/>c_cgi<sp/>&lt;<sp/>l_cgi.size()<sp/>-<sp/>1;<sp/>c_cgi++)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_value<sp/>+=<sp/>l_cgi[c_cgi]<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;%3D&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>%3D<sp/>represents<sp/>=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_value<sp/>+=<sp/>l_cgi[l_cgi.size()<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1a42304776ec9355ab89c6e8e0391f4309" kindref="member">addCgi</ref>(l_key,<sp/>paramValueDecode(l_value));</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>normalizePath(l_path);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>m_rawUrl<sp/>=<sp/>p_url;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacextd_1_1network_1_1http_1a55148922a7d13fe756e53e2ccad4b89ca444bcb3a3fcf8389296c49467f27e1d6" kindref="member">status::ok</ref>;</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445" refid="classxtd_1_1network_1_1http_1_1Request_1a00428c206d17d2557d5ed3a46a2f139b" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1a00428c206d17d2557d5ed3a46a2f139b" kindref="member">Request::getRawUrl</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="446"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>m_rawUrl;</highlight></codeline>
<codeline lineno="448"><highlight class="normal">}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal">status</highlight></codeline>
<codeline lineno="451"><highlight class="normal">Request::readVersion(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_version)</highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l_pos<sp/>=<sp/>p_version.find_last_of(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_version.substr(0,<sp/>l_pos)<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;HTTP&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>logger::err(</highlight><highlight class="stringliteral">&quot;network.http.request&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;version<sp/>error<sp/>:<sp/>invalid&quot;</highlight><highlight class="normal">,<sp/>HERE);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status::error;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>l_version<sp/>=<sp/>p_version.substr(l_pos<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1a4fc25edc6c133d46f1780a3b8c5a3c4e" kindref="member">setVersion</ref>(l_version);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l_version<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;1.0&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1a4fc25edc6c133d46f1780a3b8c5a3c4e" kindref="member">setVersion</ref>(<ref refid="classxtd_1_1network_1_1http_1_1Request_1ad1842a3667ff0a96222bb69262cda536ab4d3cfdefe25102548725517f983894f" kindref="member">Request::VERSION_1_0</ref>);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l_version<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;1.1&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1a4fc25edc6c133d46f1780a3b8c5a3c4e" kindref="member">setVersion</ref>(<ref refid="classxtd_1_1network_1_1http_1_1Request_1ad1842a3667ff0a96222bb69262cda536a78aeac842cfaa7d2ffe8ad53a630476d" kindref="member">Request::VERSION_1_1</ref>);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>logger::err(</highlight><highlight class="stringliteral">&quot;network.http.request&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;initial<sp/>line<sp/>error<sp/>:<sp/>unknown<sp/>version<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>l_version,<sp/>HERE);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status::error;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacextd_1_1network_1_1http_1a55148922a7d13fe756e53e2ccad4b89ca444bcb3a3fcf8389296c49467f27e1d6" kindref="member">status::ok</ref>;</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal">status</highlight></codeline>
<codeline lineno="479"><highlight class="normal">Request::readHeaders(istream&amp;<sp/>p_request)</highlight></codeline>
<codeline lineno="480"><highlight class="normal">{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>==<sp/>p_request.eof())</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>l_parts;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_line;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>getline(p_request,<sp/>l_line);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::trim_if(l_line,<sp/>boost::is_any_of(</highlight><highlight class="stringliteral">&quot;\t\r\n<sp/>&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(0<sp/>==<sp/>l_line.size())</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>l_parts.push_back(l_line.substr(0,<sp/>l_line.find_first_of(</highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>l_parts.push_back(l_line.substr(l_line.find_first_of(</highlight><highlight class="stringliteral">&quot;:&quot;</highlight><highlight class="normal">)<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::trim(l_parts[0]);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::trim(l_parts[1]);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1ac7f15d9f25ab85da1569e7718ea6544d" kindref="member">addHeader</ref>(l_parts[0],<sp/>l_parts[1]);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>logger::info(</highlight><highlight class="stringliteral">&quot;network.http.request&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;received<sp/>header<sp/>%s:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>l_parts[0],<sp/>l_parts[1],<sp/>HERE);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacextd_1_1network_1_1http_1a55148922a7d13fe756e53e2ccad4b89ca444bcb3a3fcf8389296c49467f27e1d6" kindref="member">status::ok</ref>;</highlight></codeline>
<codeline lineno="500"><highlight class="normal">}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal">status</highlight></codeline>
<codeline lineno="504" refid="classxtd_1_1network_1_1http_1_1Request_1a90a878fc6498d5594617329da39d1ac5" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1network_1_1http_1_1Request_1a90a878fc6498d5594617329da39d1ac5" kindref="member">Request::getDataSize</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/>p_length)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="505"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>l_strVal;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>==<sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1a99a0c9599f0d2bdc51f8e488fb4f78f4" kindref="member">getHeader</ref>(</highlight><highlight class="stringliteral">&quot;Content-Length&quot;</highlight><highlight class="normal">,<sp/>l_strVal))</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>p_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacextd_1_1network_1_1http_1a55148922a7d13fe756e53e2ccad4b89ca444bcb3a3fcf8389296c49467f27e1d6" kindref="member">status::ok</ref>;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>p_length<sp/>=<sp/>boost::lexical_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&gt;(l_strVal);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(boost::bad_lexical_cast)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>logger::err(</highlight><highlight class="stringliteral">&quot;network.http.request&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>data<sp/>:<sp/>unable<sp/>to<sp/>interpret<sp/>content-length<sp/>&apos;%s&apos;<sp/>as<sp/>int&quot;</highlight><highlight class="normal">,<sp/>l_strVal,<sp/>HERE);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status::error;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacextd_1_1network_1_1http_1a55148922a7d13fe756e53e2ccad4b89ca444bcb3a3fcf8389296c49467f27e1d6" kindref="member">status::ok</ref>;</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal">status</highlight></codeline>
<codeline lineno="532"><highlight class="normal">Request::readData(istream&amp;<sp/>p_request)</highlight></codeline>
<codeline lineno="533"><highlight class="normal">{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>l_data;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>l_contentType;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>l_contentLength<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>l_length;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>copy(std::istreambuf_iterator&lt;char&gt;(p_request.rdbuf()),</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::istreambuf_iterator&lt;char&gt;(),</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>back_inserter(l_data));</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(status::error<sp/>==<sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1a90a878fc6498d5594617329da39d1ac5" kindref="member">getDataSize</ref>(l_length))</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>logger::err(</highlight><highlight class="stringliteral">&quot;network.http.request&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>data<sp/>:<sp/>error<sp/>while<sp/>gettin<sp/>data<sp/>length&quot;</highlight><highlight class="normal">,<sp/>HERE);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status::error;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l_length<sp/>&lt;<sp/>l_data.size())</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>logger::err(</highlight><highlight class="stringliteral">&quot;network.http.request&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>data<sp/>:<sp/>read<sp/>more<sp/>data<sp/>than<sp/>expected&quot;</highlight><highlight class="normal">,<sp/>HERE);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status::error;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l_length<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacextd_1_1network_1_1http_1a55148922a7d13fe756e53e2ccad4b89ca444bcb3a3fcf8389296c49467f27e1d6" kindref="member">status::ok</ref>;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>==<sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1a99a0c9599f0d2bdc51f8e488fb4f78f4" kindref="member">getHeader</ref>(</highlight><highlight class="stringliteral">&quot;Content-Type&quot;</highlight><highlight class="normal">,<sp/>l_contentType))</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>logger::err(</highlight><highlight class="stringliteral">&quot;network.http.request&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>data<sp/>:<sp/>unable<sp/>to<sp/>get<sp/>Content-Type&quot;</highlight><highlight class="normal">,<sp/>HERE);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status::error;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(boost::starts_with(l_contentType,<sp/></highlight><highlight class="stringliteral">&quot;application/x-www-form-urlencoded&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>readDataFormEncoded(l_data);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>logger::err(</highlight><highlight class="stringliteral">&quot;network.http.request&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>data<sp/>:<sp/>unknown<sp/>content<sp/>type<sp/>&apos;%s&apos;&quot;</highlight><highlight class="normal">,<sp/>l_contentType,<sp/>HERE);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status::error;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacextd_1_1network_1_1http_1a55148922a7d13fe756e53e2ccad4b89ca444bcb3a3fcf8389296c49467f27e1d6" kindref="member">status::ok</ref>;</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal">status</highlight></codeline>
<codeline lineno="578"><highlight class="normal">Request::readDataFormEncoded(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_data)</highlight></codeline>
<codeline lineno="579"><highlight class="normal">{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_postPairs;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;::const_iterator<sp/>cc_postPair;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>boost::split(l_postPairs,<sp/>p_data,<sp/>boost::is_any_of(</highlight><highlight class="stringliteral">&quot;&amp;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cc_postPair<sp/>=<sp/>l_postPairs.begin();<sp/>cc_postPair<sp/>!=<sp/>l_postPairs.end();<sp/>cc_postPair++)</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>l_post;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_key;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_value;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cc_postPair-&gt;size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::split(l_post,<sp/>*cc_postPair,<sp/>boost::is_any_of(</highlight><highlight class="stringliteral">&quot;=&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>l_key<sp/>=<sp/>l_post[0];</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l_post.size()<sp/>==<sp/>2)</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>l_value<sp/>=<sp/>l_post[1];</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l_post.size()<sp/>&gt;<sp/>2)</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>logger::err(</highlight><highlight class="stringliteral">&quot;network.http.request&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;read<sp/>data<sp/>form<sp/>:<sp/>invalid<sp/>post&quot;</highlight><highlight class="normal">,<sp/>HERE);</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status::error;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1a463b8876852246bac863584f9dc3d0ae" kindref="member">addPost</ref>(l_key,<sp/>paramValueDecode(l_value));</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacextd_1_1network_1_1http_1a55148922a7d13fe756e53e2ccad4b89ca444bcb3a3fcf8389296c49467f27e1d6" kindref="member">status::ok</ref>;</highlight></codeline>
<codeline lineno="605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal">Request::as(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_src,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_dst)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="610"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>p_dst<sp/>=<sp/>p_src;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal">Request::as(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_src,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">&amp;<sp/>p_dst)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="617"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;<sp/>l_valuesYes;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>vector&lt;string&gt;<sp/>l_valuesNo;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>l_valuesYes<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;on&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="stringliteral">&quot;oui&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">,<sp/><sp/></highlight><highlight class="stringliteral">&quot;yes&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/>l_valuesNo<sp/><sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;off&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;non&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;no&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l_valuesYes.end()<sp/>!=<sp/>std::find(l_valuesYes.begin(),<sp/>l_valuesYes.end(),<sp/>p_src))</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>p_dst<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(l_valuesNo.end()<sp/>!=<sp/>std::find(l_valuesNo.begin(),<sp/>l_valuesNo.end(),<sp/>p_src))</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>p_dst<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal">Request::as(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_src,<sp/>uint8_t&amp;<sp/>p_dst)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="640"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>uint64_t<sp/>l_value;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((</highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>==<sp/>as(p_src,<sp/>l_value))<sp/>||</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(l_value<sp/>&gt;<sp/>std::numeric_limits&lt;uint8_t&gt;::max()))</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/>p_dst<sp/>=<sp/>l_value;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654" refid="namespacextd_1_1network_1_1http_1a9cd58530344372f236be8478d9c41ac3" refkind="member"><highlight class="normal">ostream&amp;<sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1a4ef55dada327d66bc23474520e1ae32c" kindref="member">operator&lt;&lt;</ref>(ostream&amp;<sp/>p_buf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classxtd_1_1network_1_1http_1_1Request" kindref="compound">Request</ref>&amp;<sp/>p_obj)</highlight></codeline>
<codeline lineno="655"><highlight class="normal">{</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>Request::t_param_map::const_iterator<sp/><sp/>cc_cgi;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>Request::t_param_map::const_iterator<sp/><sp/>cc_post;</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>Request::t_header_map::const_iterator<sp/>cc_header;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(p_obj.<ref refid="classxtd_1_1network_1_1http_1_1Request_1af06004afe64f465edfb281407b7f3600" kindref="member">getMethod</ref>())</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1a789d6d688af4e63cc725542fc7925627a211feb11ea0c6defc080b91b8174ced6" kindref="member">Request::METHOD_GET</ref>:</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>p_buf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;method<sp/>:<sp/>GET&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1a789d6d688af4e63cc725542fc7925627ab832c767db7682c75bc4aa0d169b47cb" kindref="member">Request::METHOD_POST</ref>:</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>p_buf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;method<sp/>:<sp/>POST&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="classxtd_1_1network_1_1http_1_1Request_1a789d6d688af4e63cc725542fc7925627a71ee8e01b676b10c098c9a9ccf53b414" kindref="member">Request::METHOD_HEAD</ref>:</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>p_buf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;method<sp/>:<sp/>HEAD&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/>p_buf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;path<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p_obj.<ref refid="classxtd_1_1network_1_1http_1_1Request_1a0006f0a88dccabdafe9dfed3627730f6" kindref="member">getPath</ref>()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>p_buf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;version<sp/>:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>p_obj.<ref refid="classxtd_1_1network_1_1http_1_1Request_1a609f7328025e89fd8325677212ab307b" kindref="member">getVersionStr</ref>()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>p_buf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;headers<sp/>:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(cc_header<sp/>=<sp/>p_obj.<ref refid="classxtd_1_1network_1_1http_1_1Request_1abbe34833ea46c5a794c7c49796a192c3" kindref="member">getHeaders</ref>().begin();</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_header<sp/>!=<sp/>p_obj.<ref refid="classxtd_1_1network_1_1http_1_1Request_1abbe34833ea46c5a794c7c49796a192c3" kindref="member">getHeaders</ref>().end();</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_header++)</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>p_buf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cc_header-&gt;first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cc_header-&gt;second<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>p_buf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;cgi<sp/>list<sp/>:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>for<sp/>(cc_cgi<sp/>=<sp/>p_obj.<ref refid="classxtd_1_1network_1_1http_1_1Request_1a48687de33ff80c714d6bc0112aa23c56" kindref="member">getCgis</ref>().begin();</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_cgi<sp/>!=<sp/>p_obj.<ref refid="classxtd_1_1network_1_1http_1_1Request_1a48687de33ff80c714d6bc0112aa23c56" kindref="member">getCgis</ref>().end();</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_cgi++)</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>p_buf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cc_cgi-&gt;first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cc_cgi-&gt;second<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>p_buf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;post<sp/>list<sp/>:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>for<sp/>(cc_post<sp/>=<sp/>p_obj.<ref refid="classxtd_1_1network_1_1http_1_1Request_1a1a849dbe8e258e208325056ac46438c9" kindref="member">getPosts</ref>().begin();</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_post<sp/>!=<sp/>p_obj.<ref refid="classxtd_1_1network_1_1http_1_1Request_1a1a849dbe8e258e208325056ac46438c9" kindref="member">getPosts</ref>().end();</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cc_post++)</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>p_buf<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-&gt;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cc_post-&gt;first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cc_post-&gt;second<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p_buf;</highlight></codeline>
<codeline lineno="693"><highlight class="normal">}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal">}}}<sp/></highlight><highlight class="comment">//end<sp/>namspaces</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/psyco/dev/xtdcpp/network/src/http/Request.cc"/>
  </compounddef>
</doxygen>
