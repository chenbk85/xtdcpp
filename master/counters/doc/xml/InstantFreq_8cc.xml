<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="InstantFreq_8cc" kind="file" language="C++">
    <compoundname>InstantFreq.cc</compoundname>
    <includes refid="InstantFreq_8hh" local="yes">InstantFreq.hh</includes>
    <includes local="no">boost/interprocess/detail/atomic.hpp</includes>
    <includes local="no">boost/range/algorithm/find_if.hpp</includes>
    <includes local="no">boost/bind.hpp</includes>
    <incdepgraph>
      <node id="760">
        <label>InstantFreq.hh</label>
        <link refid="InstantFreq_8hh"/>
        <childnode refid="761" relation="include">
        </childnode>
        <childnode refid="762" relation="include">
        </childnode>
      </node>
      <node id="765">
        <label>boost/thread/mutex.hpp</label>
      </node>
      <node id="762">
        <label>Value.hh</label>
        <link refid="Value_8hh"/>
        <childnode refid="763" relation="include">
        </childnode>
        <childnode refid="764" relation="include">
        </childnode>
      </node>
      <node id="759">
        <label>/home/psyco/dev/xtdcpp/counters/src/InstantFreq.cc</label>
        <link refid="InstantFreq.cc"/>
        <childnode refid="760" relation="include">
        </childnode>
        <childnode refid="769" relation="include">
        </childnode>
        <childnode refid="770" relation="include">
        </childnode>
        <childnode refid="771" relation="include">
        </childnode>
      </node>
      <node id="764">
        <label>Base.hh</label>
        <link refid="Base_8hh"/>
        <childnode refid="765" relation="include">
        </childnode>
        <childnode refid="766" relation="include">
        </childnode>
        <childnode refid="767" relation="include">
        </childnode>
        <childnode refid="768" relation="include">
        </childnode>
      </node>
      <node id="766">
        <label>boost/noncopyable.hpp</label>
      </node>
      <node id="763">
        <label>string</label>
      </node>
      <node id="768">
        <label>Visitor.hh</label>
        <link refid="Visitor_8hh"/>
        <childnode refid="767" relation="include">
        </childnode>
      </node>
      <node id="769">
        <label>boost/interprocess/detail/atomic.hpp</label>
      </node>
      <node id="761">
        <label>deque</label>
      </node>
      <node id="771">
        <label>boost/bind.hpp</label>
      </node>
      <node id="767">
        <label>types.hh</label>
      </node>
      <node id="770">
        <label>boost/range/algorithm/find_if.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacextd">xtd</innernamespace>
    <innernamespace refid="namespacextd_1_1counters">xtd::counters</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="InstantFreq_8hh" kindref="compound">InstantFreq.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/interprocess/detail/atomic.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/range/algorithm/find_if.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/bind.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">bpt<sp/>=<sp/>boost::posix_time;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacextd" kindref="compound">xtd</ref><sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">counters<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="classxtd_1_1counters_1_1InstantFreq_1a428c013f73c1322ee3fc74cc08171c8c" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1counters_1_1InstantFreq_1a428c013f73c1322ee3fc74cc08171c8c" kindref="member">InstantFreq::InstantFreq</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>p_name,</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/>p_timeDeltaMs)<sp/>:</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><ref refid="classxtd_1_1counters_1_1Value" kindref="compound">Value</ref>(p_name),</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/>m_samples(),</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/>m_timeDeltaMs(p_timeDeltaMs)</highlight></codeline>
<codeline lineno="20"><highlight class="normal">{</highlight></codeline>
<codeline lineno="21"><highlight class="normal">}</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="classxtd_1_1counters_1_1InstantFreq_1a1760f09b25b97545169be189bf99d250" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1counters_1_1InstantFreq_1a1760f09b25b97545169be189bf99d250" kindref="member">InstantFreq::tick</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/>boost::mutex::scoped_lock<sp/>l_lock(<ref refid="classxtd_1_1counters_1_1Base_1aeeac2ffcae02eb6341418d708188a353" kindref="member">m_mutex</ref>);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>bpt::ptime<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>l_now<sp/>=<sp/>bpt::microsec_clock::local_time();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>m_samples.push_front(l_now);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>shrink_safe(l_now);</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="classxtd_1_1counters_1_1InstantFreq" kindref="compound">InstantFreq</ref>&amp;</highlight></codeline>
<codeline lineno="34" refid="classxtd_1_1counters_1_1InstantFreq_1a3ae7dc13ff6209a0628cdf481ab0a37c" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1counters_1_1InstantFreq_1a3ae7dc13ff6209a0628cdf481ab0a37c" kindref="member">InstantFreq::operator=</ref>(uint32_t<sp/>p_value)</highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><ref refid="classxtd_1_1counters_1_1Value_1a017667569f4177e0c44836ef4e9bc7b0" kindref="member">Value&lt;uint32_t&gt;::operator=</ref>(p_value);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">InstantFreq::shrink_safe(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bpt::ptime&amp;<sp/>p_from)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>t_timevect::iterator<sp/>c_elem<sp/>=</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::find_if(m_samples,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::bind(&amp;InstantFreq::expired_safe,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>_1,<sp/>boost::ref(p_from)));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>m_samples.erase(c_elem,<sp/>m_samples.end());</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal">InstantFreq::expired_safe(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bpt::ptime&amp;<sp/>p_item,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>bpt::ptime&amp;<sp/>p_now)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="52"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>bpt::time_duration<sp/>l_diffTime<sp/>=<sp/>p_now<sp/>-<sp/>p_item;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l_diffTime.total_milliseconds()<sp/>&gt;<sp/>m_timeDeltaMs;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="classxtd_1_1counters_1_1InstantFreq_1a2e4629f5a835d7b52425a72f25dcd4d2" refkind="member"><highlight class="normal"><ref refid="classxtd_1_1counters_1_1InstantFreq_1a2e4629f5a835d7b52425a72f25dcd4d2" kindref="member">InstantFreq::update_safe</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>bpt::ptime<sp/>l_now<sp/>=<sp/>bpt::microsec_clock::local_time();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>shrink_safe(l_now);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><ref refid="classxtd_1_1counters_1_1Value_1abe06c1cebededaf2f216707171f63c3c" kindref="member">m_value</ref><sp/>=<sp/>(m_samples.size()<sp/>*<sp/>1000)<sp/>/<sp/>m_timeDeltaMs;</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">}}</highlight></codeline>
    </programlisting>
    <location file="/home/psyco/dev/xtdcpp/counters/src/InstantFreq.cc"/>
  </compounddef>
</doxygen>
