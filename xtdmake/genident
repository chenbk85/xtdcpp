#!/bin/bash

PATH=$PATH:/bin:/usr/bin:/usr/local/bin
l_progName=$0
l_top_srcdir=""
l_deps=""


function usage
{
  echo "usage : ${l_progName} --top_srcdir=DIR --deps=LIST"
  echo ""
	echo "Fetches bazaar information from given source directory"
	echo ""
  echo "[parameters]"
  echo "  --top_srcdir=DIR : input source directory"
  echo "  --bin-name=NAME  : binary name"
  echo "  --deps=LISt      : list of .a dependencies (space separated)"
	echo "  --help           : display this message"
  exit 1;
}



function readOptions
{
  while true; do
    case "$1" in
      --top-srcdir)
        l_top_srcdir=$2;
        shift 2;;
      --bin-name)
        l_bin_name=$2;
        shift 2;;
      --deps)
        l_deps="$2";
        shift 2;;
      --help)
				usage;;
      --)
        shift;
        break;;
      *)
        echo "error: internal problem while parsing options"
        usage;;
    esac
  done
}


function checkOptions
{
  if [ ! -d "${l_top_srcdir}" ]; then
    echo "invalid input --top-srcdir='${l_top_srcdir}'"
    usage
  fi
}



function getinfo
{
  l_date=$(date +"%b %d %Y")
  l_date=$(printf '$date: %s $' "${l_date}")

  l_time=$(date +"%H:%M:%S")
  l_time=$(printf '$time: %s $' "${l_time}")

  l_name=$(printf '$name: %s $' "${l_bin_name}")

  l_user=$(id -un)
  l_user=$(printf '$user: %s $' "${l_user}")

  l_host=$(hostname)
  l_host=$(printf '$host: %s $' "${l_host}")

  l_path=$(pwd)
  l_path=$(printf '$path: %s $' "${l_path}")

  if [ -d "${l_top_srcdir}/.git" ]; then
    l_revno=$(cd "${l_top_srcdir}" && git rev-parse HEAD)
    l_data=$(cd "${l_top_srcdir}" && git rev-parse --abbrev-ref HEAD | awk '{gsub("_", "", $1); print "$""branch: "$1" $"}' | tr '\n' ' ')
    l_revno=$(printf '$revno: %s $' "${l_revno}")
  elif [ -d "${l_top_srcdir}/.bzr" ]; then
    l_revno=$(cat "${l_top_srcdir}/.bzr/branch/last-revision")
    l_data=$(cat "${l_top_srcdir}/.bzr/branch/branch.conf"  | awk '{gsub("_", "", $1); print "$"$1": "$3 " $"}' | tr '\n' ' ')
    l_revno=$(printf '$revno: %s $' "${l_revno}")
  else
    l_revno="xxxx"
    l_data="xxxx"
  fi



  for c_dep in $(echo "${l_deps}"); do
    c_dep=$(readlink -m ${c_dep})
    l_versionFile=$(basename "${c_dep}").version
    l_tmpDir=$(mktemp -d)
    l_pwd=$(pwd)
    cd ${l_tmpDir}
    ar x ${c_dep} ${l_versionFile} 2> /dev/null > /dev/null
    if [ -f "${l_versionFile}" ]; then
      l_libKeywords="${l_libKeywords} $(cat ${l_versionFile})"
    fi
    rm -f ${l_versionFile}
    rm -rf ${l_tmpDir}
    cd ${l_pwd}
  done

  echo "${l_date}" "${l_time}" "${l_name}" "${l_user}" "${l_host}" "${l_path}" "${l_revno}" "${l_data}" "${l_libKeywords}"
}

l_parseResult=`/usr/bin/getopt -o h\
		--long top-srcdir:,bin-name:,help,deps: \
	-n "${l_progName}" -- "$@"`

if [ $? != 0 ]; then
  usage
fi

eval set -- "${l_parseResult}"

readOptions "$@"
checkOptions
getinfo "$@"
